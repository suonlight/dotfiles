#+TITLE: Dotfiles
#+Author: Minh Nguyen

* [#A] Basic Tools
** Setup dotfiles

You need to have environment in your .zshenv first. My config is:

#+begin_src shell :async :results output
export WORKSPACE="$HOME/projects"
#+end_src

#+begin_src shell :async :results output
mkdir -p $WORKSPACE
cd $WORKSPACE
git clone git@github.com:suonlight/dotfiles.git
mkdir -p ~/.config/nvim
rm -rf ~/.zshrc ~/.tmux.conf ~/.tmux.sp ~/.ctags ~/.editorconfig ~/.config/doom ~/.config/nvim ~/.config/alacritty
ln -s $WORKSPACE/dotfiles/.zshrc ~/.zshrc
ln -s $WORKSPACE/dotfiles/.tmux.conf ~/.tmux.conf
ln -s $WORKSPACE/dotfiles/.tmux.sp ~/.tmux.sp
ln -s $WORKSPACE/dotfiles/.editorconfig ~/.editorconfig
ln -s $WORKSPACE/dotfiles/.ctags ~/.ctags
ln -s $WORKSPACE/dotfiles/nvim ~/.config/nvim
ln -s $WORKSPACE/dotfiles/alacritty ~/.config/alacritty
ln -s $WORKSPACE/dotfiles/doom ~/.config/doom
ln -s $WORKSPACE/dotfiles/karabiner ~/.config/karabiner
ln -s $WORKSPACE/dotfiles/tridactyl ~/.config/tridactyl

mkdir -p ~/.config/bat
ln -s $WORKSPACE/dotfiles/bat.conf ~/.config/bat/config
#+end_src

** Neovim

#+begin_src shell :async :results output
brew install neovim
#+end_src

Start nvim then run `:PackerInstall` to install vim's Plugins

** Tmux

#+begin_src shell :async :results output
brew install tmux

# install tpm
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+end_src

Start tmux then press `C-SPC I` (C-SPC means tmux prefix) to install tpm plugins

** ZSH

#+begin_src shell :async :results output
brew install zsh zsh-completions
chsh -s /bin/zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
brew install zplug
#+end_src

** Emacs
*** Use emacs-plus

#+begin_src shell :async :results output
brew install gcc libgccjit
# need to reinstall if you already installed $ brew reinstall gcc libgccjit
brew tap d12frosted/emacs-plus
#+end_src

#+BEGIN_SRC shell :async :results output
brew install emacs-plus@29 --with-native-comp --with-modern-sexy-v1-icon
#+END_SRC

*** Doom

#+begin_src shell :async :results output
rm -rf ~/.emacs.d
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/projects/doom-emacs
ln -s ~/projects/doom-emacs ~/.config/emacs
#+end_src

#+begin_src shell :async :results output
ln -s ~/projects/dotfiles/doom ~/.config/doom
rm -rf ~/.config/doom/snippets
ln -s ~/.config/doom/private/snippets ~/.config/doom/snippets
#+end_src

#+begin_src shell :async :results output
cd ~/.config/emacs
bin/doom install
#+end_src

*To make sure vterm use zsh by default*

#+begin_src shell
export SHELL=$(which zsh)
bin/doom sync
#+end_src

* Programming Languages
** [#A] asdf

https://asdf-vm.com/#/core-manage-asdf-vm

#+begin_src shell :async :results output
# Install asdf by git
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0
#+end_src

#+begin_src shell :async :results output
asdf plugin-add postgres
asdf plugin-add ruby
asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
asdf plugin-add yarn
#+end_src

** [#A] Terminal tools

#+begin_src shell :async :results output
brew install autojump
brew install wget
#+end_src

#+begin_src shell :async :results output
# OR brew install ripgrep
asdf plugin add ripgrep
asdf install ripgrep latest
asdf global ripgrep $(ls ~/.asdf/installs/ripgrep/ | head -n 1)
#+end_src

#+begin_src shell :async :results output
asdf plugin add fd
asdf install fd latest
asdf global fd $(ls ~/.asdf/installs/fd/ | head -n 1)
#+end_src

#+begin_src shell :async :results output
asdf plugin add fzf https://github.com/kompiro/asdf-fzf.git
asdf install fzf latest
asdf global fzf $(ls ~/.asdf/installs/fzf/ | head -n 1)
#+end_src

#+begin_src shell :async :results output
asdf plugin-add yq https://github.com/sudermanjr/asdf-yq.git
asdf install yq latest
asdf global yq $(ls ~/.asdf/installs/yq/ | head -n 1)
#+end_src

#+begin_src shell :async :results output
# DO NOT SUPPORT m3
asdf plugin add bat
asdf install bat latest
asdf global bat $(ls ~/.asdf/installs/bat/ | head -n 1)
#+end_src

** [#A] Ruby

#+begin_src shell :async :results output
brew install openssl@1.1

RUBY_CONFIGURE_OPTS="--with-zlib-dir=$(brew --prefix zlib) --with-openssl-dir=$(brew --prefix openssl@1.1) --with-readline-dir=$(brew --prefix readline) --with-libyaml-dir=$(brew --prefix libyaml) --with-gdbm-dir=$(brew --prefix gdbm)" \
CFLAGS="-Wno-error=implicit-function-declaration" \
asdf install ruby 2.7.8
asdf global ruby 2.7.8
#+end_src

** [#A] Postgres

#+begin_src shell :async :results output
POSTGRES_EXTRA_CONFIGURE_OPTIONS=--with-uuid=e2fs asdf install postgres 13.4
asdf global postgres 13.4
#+end_src

** [#A] Redis

#+begin_src shell :async :results output
asdf plugin-add redis https://github.com/smashedtoatoms/asdf-redis.git
asdf install redis latest
asdf global redis 6.2.6
#+end_src

** [#A] NodeJs

#+begin_src shell :async :results output
brew install gnupg
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
asdf install nodejs 18.19.1
asdf global nodejs 18.19.1

asdf install yarn 1.21.1
asdf global yarn 1.21.1
#+end_src
** [#B] Python

#+begin_src shell :async :results output
asdf plugin-add python
asdf install python 2.7.16
asdf install python 3.9.1
asdf global python 2.7.16 3.9.1
#+end_src

#+RESULTS:
: 82759ff0eb6345e2432a6c33ea604a7a

** [#B] R

#+begin_src shell :async :results output
asdf plugin-add R https://github.com/taiar/asdf-R.git
R_EXTRA_CONFIGURE_OPTIONS=--with-x=no asdf install R 4.0.3
asdf global R 4.0.3
#+end_src

#+begin_src shell :async :results output
install.packages("dplyr")
install.packages("ggplot2")
#+end_src

** [#B] Java

#+begin_src shell :async :results output
asdf plugin-add java https://github.com/halcyon/asdf-java.git
asdf install java adoptopenjdk-15.0.1+9
asdf global java adoptopenjdk-15.0.1+9
#+end_src

** [#B] Rust
#+begin_src shell :async :results output
curl https://sh.rustup.rs -sSf | sh
#+end_src

#+begin_src shell :async :results output
rustup toolchain add nightly
cargo +nightly install racer
cargo install rustfmt
rustup component add rls rust-analysis rust-src
#+end_src

** [#B] Others

#+begin_src shell :async :results output
brew install jq
brew install q
brew install ctags
#+end_src

#+begin_src shell :async :results output
# format sql
pip install sqlparse
# brew install sqlformat
brew install sqlfmt
#+end_src

#+begin_src shell :async :results output
brew install mplayer
#+end_src

* [#B] Advance Tools
** Key Repeat

#+begin_src shell :async :results output
defaults write NSGlobalDomain KeyRepeat -int 1 # normal minimum is 2 (30 ms)
defaults write NSGlobalDomain InitialKeyRepeat -int 10
#+end_src

** org-protocol
*** Test org-protocol

- Test on Emacs. Follow https://github.com/xuchunyang/setup-org-protocol-on-mac

#+begin_src shell :async :results output
emacsclient -c 'org-protocol:/capture?template=L&url=foo&title=bar'
#+end_src

- Test on Browser

#+begin_src js
location.href='org-protocol:/capture?template=E&url=foo&title=bar'
#+end_src

*** Creating org-protocol by Apple Script

#+BEGIN_SRC applescript
on open location this_URL
  -- do shell script "/usr/local/bin/emacsclient \"" & this_URL & "\" -F '((name . \"doom-capture\") (width . 70) (height . 25) (transient . t))'"
  do shell script "/usr/local/bin/emacsclient -F '((name . \"doom-capture\") (width . 70) (height . 25) (transient . t))' -e '(org-protocol-open-frame \"" & this_URL & "\")'"
  activate application "Emacs"
end open location
#+END_SRC

or

#+begin_src shell :async :results output
cp ~/projects/dotfiles/org-protocol* /Applications/
#+end_src

- Open org-protocol and export it by application
- Edit Info.plist with

#+begin_src shell :async :results output
/Applications/org-protocol.app/Contents/Info.plist
#+end_src

#+RESULTS:

#+begin_src xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>org-protocol handler</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>org-protocol</string>
    </array>
  </dict>
</array>
#+end_src

- *IMPORTANT: Exit and Active org-protocol.app by clicking on it*

*** Setup on Firefox

#+begin_src js
[
  {
    "key": "ctrl+shift+n",
    "action": "javascript",
    "blacklist": "false",
    "sites": "*mail.google.com*",
    "open": false,
    "activeInInputs": true,
    "code": "location.href = 'org-protocol://capture?template=N&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection()).replace(/'/g, '%27');",
    "exported": false,
    "sitesArray": [
      "*mail.google.com*"
    ],
    "customName": "Capture today notes"
  },
  {
    "key": "ctrl+shift+e",
    "action": "javascript",
    "blacklist": "false",
    "sites": "*mail.google.com*",
    "open": false,
    "code": "var activeTextarea = document.activeElement;\nvar selection = activeTextarea.tagName == \"TEXTAREA\" ? activeTextarea.value.substring(\n    activeTextarea.selectionStart, activeTextarea.selectionEnd\n ) : window.getSelection();\n\nlocation.href='org-protocol://capture?template=E&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(selection)",
    "activeInInputs": true,
    "exported": false,
    "sitesArray": [
      "*mail.google.com*"
    ]
  }
]
#+end_src

** Install Fonts

#+begin_src shell :async :results output
brew tap homebrew/cask-fonts && brew install --cask font-source-code-pro
#+end_src

Install all the icons by Emacs

#+BEGIN_SRC emacs-lisp
(all-the-icons-install-fonts)
#+END_SRC

** talon

My talon config is here: https://github.com/suonlight/knausj_talon

#+BEGIN_SRC shell :results output
git clone git@github.com:suonlight/knausj_talon.git $WORKSPACE/knausj_talon

mkdir -p ~/.talon/user ~/.config/polybar
rm -rf ~/.talon/user/knausj_talon
rm -rf ~/.talon/user/hero
ln -s $WORKSPACE/knausj_talon ~/.talon/user/knausj_talon
ln -s $WORKSPACE/dotfiles/doom/private/talon/hero ~/.talon/user/hero
#+END_SRC

** aspell

#+BEGIN_SRC shell :results output
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null 2> /dev/null
#+END_SRC

* Linux

Using emacs exwm

#+begin_src shell :async :results output
# polybar
rm -rf ~/.config/polybar
ln -s $WORKSPACE/dotfiles/polybar ~/.config/polybar

# x window
rm ~/.xinitrc ~/.xprofile
ln -s $WORKSPACE/dotfiles/.xinitrc ~/.xinitrc
ln -s $WORKSPACE/dotfiles/.xprofile ~/.xprofile
#+end_src
